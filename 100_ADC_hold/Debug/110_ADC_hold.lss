
110_ADC_hold.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000010c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000570  00000000  00000000  00000160  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      0000075a  00000000  00000000  000006d0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 61 00 	call	0xc2	; 0xc2 <main>
  78:	0c 94 84 00 	jmp	0x108	; 0x108 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <InitADC>:
#include <avr/io.h>
#include <util/delay.h>

void InitADC() {
	// For Aref=AVcc;
	ADMUX = (1 << REFS0);
  80:	80 e4       	ldi	r24, 0x40	; 64
  82:	80 93 7c 00 	sts	0x007C, r24
	//Rrescalar div factor =128
	ADCSRA = (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
  86:	87 e8       	ldi	r24, 0x87	; 135
  88:	80 93 7a 00 	sts	0x007A, r24
}
  8c:	08 95       	ret

0000008e <ReadADC>:

uint16_t ReadADC(uint8_t ch) {
	//Select ADC Channel ch must be 0-7
	ADMUX |= (ch & 0x07);
  8e:	90 91 7c 00 	lds	r25, 0x007C
  92:	87 70       	andi	r24, 0x07	; 7
  94:	89 2b       	or	r24, r25
  96:	80 93 7c 00 	sts	0x007C, r24

	//Start Single conversion
	ADCSRA |= (1 << ADSC);
  9a:	80 91 7a 00 	lds	r24, 0x007A
  9e:	80 64       	ori	r24, 0x40	; 64
  a0:	80 93 7a 00 	sts	0x007A, r24

	//Wait for conversion to complete
	while (!(ADCSRA & (1 << ADIF)))
  a4:	80 91 7a 00 	lds	r24, 0x007A
  a8:	84 ff       	sbrs	r24, 4
  aa:	fc cf       	rjmp	.-8      	; 0xa4 <ReadADC+0x16>

	//Clear ADIF by writing one to it
	//Note you may be wondering why we have write one to clear it
	//This is standard way of clearing bits in io as said in datasheets.
	//The code writes '1' but it result in setting bit to '0' !!!
	ADCSRA |= (1 << ADIF);
  ac:	80 91 7a 00 	lds	r24, 0x007A
  b0:	80 61       	ori	r24, 0x10	; 16
  b2:	80 93 7a 00 	sts	0x007A, r24

	return (ADC);
  b6:	20 91 78 00 	lds	r18, 0x0078
  ba:	30 91 79 00 	lds	r19, 0x0079
}
  be:	c9 01       	movw	r24, r18
  c0:	08 95       	ret

000000c2 <main>:

int main(void) {
  c2:	1f 93       	push	r17
  c4:	cf 93       	push	r28
  c6:	df 93       	push	r29
	int temp;

	DDRB = 0xFF;
  c8:	8f ef       	ldi	r24, 0xFF	; 255
  ca:	84 b9       	out	0x04, r24	; 4

	PORTB = 0;
  cc:	15 b8       	out	0x05, r1	; 5
#include <avr/io.h>
#include <util/delay.h>

void InitADC() {
	// For Aref=AVcc;
	ADMUX = (1 << REFS0);
  ce:	80 e4       	ldi	r24, 0x40	; 64
  d0:	80 93 7c 00 	sts	0x007C, r24
	//Rrescalar div factor =128
	ADCSRA = (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
  d4:	87 e8       	ldi	r24, 0x87	; 135
  d6:	80 93 7a 00 	sts	0x007A, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  da:	c0 e9       	ldi	r28, 0x90	; 144
  dc:	d1 e0       	ldi	r29, 0x01	; 1

		temp /= 100;
		temp = (0xffff << temp);

		_delay_ms(100);
		PORTB = 0xFF;
  de:	1f ef       	ldi	r17, 0xFF	; 255
	PORTB = 0;

	InitADC();

	while (1) {
		PORTB = 0x00;
  e0:	15 b8       	out	0x05, r1	; 5
		temp = ReadADC(0);
  e2:	80 e0       	ldi	r24, 0x00	; 0
  e4:	0e 94 47 00 	call	0x8e	; 0x8e <ReadADC>
  e8:	88 ee       	ldi	r24, 0xE8	; 232
  ea:	93 e0       	ldi	r25, 0x03	; 3
  ec:	fe 01       	movw	r30, r28
  ee:	31 97       	sbiw	r30, 0x01	; 1
  f0:	f1 f7       	brne	.-4      	; 0xee <main+0x2c>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  f2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  f4:	d9 f7       	brne	.-10     	; 0xec <main+0x2a>

		temp /= 100;
		temp = (0xffff << temp);

		_delay_ms(100);
		PORTB = 0xFF;
  f6:	15 b9       	out	0x05, r17	; 5
  f8:	88 ee       	ldi	r24, 0xE8	; 232
  fa:	93 e0       	ldi	r25, 0x03	; 3
  fc:	fe 01       	movw	r30, r28
  fe:	31 97       	sbiw	r30, 0x01	; 1
 100:	f1 f7       	brne	.-4      	; 0xfe <main+0x3c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 102:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 104:	d9 f7       	brne	.-10     	; 0xfc <main+0x3a>
 106:	ec cf       	rjmp	.-40     	; 0xe0 <main+0x1e>

00000108 <_exit>:
 108:	f8 94       	cli

0000010a <__stop_program>:
 10a:	ff cf       	rjmp	.-2      	; 0x10a <__stop_program>
