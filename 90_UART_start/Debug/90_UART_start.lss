
90_UART_start.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000040  00800100  00000294  00000308  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000294  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         00000498  00000000  00000000  00000348  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000072e  00000000  00000000  000007e0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e9       	ldi	r30, 0x94	; 148
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	a0 34       	cpi	r26, 0x40	; 64
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>
  8a:	0e 94 77 00 	call	0xee	; 0xee <main>
  8e:	0c 94 48 01 	jmp	0x290	; 0x290 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <getch>:
#include <avr/io.h>

#define USART_BAUDRATE 9600
#define BAUD_PRESCALE (((F_CPU/(USART_BAUDRATE*16UL)))-1)

char getch(void) {
  96:	df 93       	push	r29
  98:	cf 93       	push	r28
  9a:	0f 92       	push	r0
  9c:	cd b7       	in	r28, 0x3d	; 61
  9e:	de b7       	in	r29, 0x3e	; 62
	unsigned char data;

	//데이터를 받을 때까지 대기
	while ((UCSR0A & (1 << RXC0)) == 0)
  a0:	e0 ec       	ldi	r30, 0xC0	; 192
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	80 81       	ld	r24, Z
  a6:	88 23       	and	r24, r24
  a8:	dc f7       	brge	.-10     	; 0xa0 <getch+0xa>

	//while (bit_is_set(UCSR0A,RXC0);
	//while (!(UCSR0A & 0x80);

	// Receiver register에 보내고자 하는 데이터를 저장
	data = UDR0;
  aa:	e6 ec       	ldi	r30, 0xC6	; 198
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	80 81       	ld	r24, Z
  b0:	89 83       	std	Y+1, r24	; 0x01

	return data;
  b2:	89 81       	ldd	r24, Y+1	; 0x01
}
  b4:	0f 90       	pop	r0
  b6:	cf 91       	pop	r28
  b8:	df 91       	pop	r29
  ba:	08 95       	ret

000000bc <putch>:

int putch (char data) {
  bc:	df 93       	push	r29
  be:	cf 93       	push	r28
  c0:	0f 92       	push	r0
  c2:	cd b7       	in	r28, 0x3d	; 61
  c4:	de b7       	in	r29, 0x3e	; 62
  c6:	89 83       	std	Y+1, r24	; 0x01
	while (!(UCSR0A & (1 << UDRE0)))
  c8:	e0 ec       	ldi	r30, 0xC0	; 192
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	80 81       	ld	r24, Z
  ce:	88 2f       	mov	r24, r24
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	80 72       	andi	r24, 0x20	; 32
  d4:	90 70       	andi	r25, 0x00	; 0
  d6:	00 97       	sbiw	r24, 0x00	; 0
  d8:	b9 f3       	breq	.-18     	; 0xc8 <putch+0xc>
		;
	UDR0 = data;
  da:	e6 ec       	ldi	r30, 0xC6	; 198
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	89 81       	ldd	r24, Y+1	; 0x01
  e0:	80 83       	st	Z, r24
	return 0;
  e2:	80 e0       	ldi	r24, 0x00	; 0
  e4:	90 e0       	ldi	r25, 0x00	; 0
}
  e6:	0f 90       	pop	r0
  e8:	cf 91       	pop	r28
  ea:	df 91       	pop	r29
  ec:	08 95       	ret

000000ee <main>:

int main(void) {
  ee:	df 93       	push	r29
  f0:	cf 93       	push	r28
  f2:	cd b7       	in	r28, 0x3d	; 61
  f4:	de b7       	in	r29, 0x3e	; 62
  f6:	cc 54       	subi	r28, 0x4C	; 76
  f8:	d0 40       	sbci	r29, 0x00	; 0
  fa:	0f b6       	in	r0, 0x3f	; 63
  fc:	f8 94       	cli
  fe:	de bf       	out	0x3e, r29	; 62
 100:	0f be       	out	0x3f, r0	; 63
 102:	cd bf       	out	0x3d, r28	; 61
	char recieved_byte;
	unsigned char text[] =
				"\r\nWelcome! Serial communication world!!\r\n Good Luck\r\n";
 104:	ce 01       	movw	r24, r28
 106:	04 96       	adiw	r24, 0x04	; 4
 108:	25 96       	adiw	r28, 0x05	; 5
 10a:	9f af       	std	Y+63, r25	; 0x3f
 10c:	8e af       	std	Y+62, r24	; 0x3e
 10e:	25 97       	sbiw	r28, 0x05	; 5
 110:	e0 e0       	ldi	r30, 0x00	; 0
 112:	f1 e0       	ldi	r31, 0x01	; 1
 114:	27 96       	adiw	r28, 0x07	; 7
 116:	ff af       	std	Y+63, r31	; 0x3f
 118:	ee af       	std	Y+62, r30	; 0x3e
 11a:	27 97       	sbiw	r28, 0x07	; 7
 11c:	f6 e3       	ldi	r31, 0x36	; 54
 11e:	28 96       	adiw	r28, 0x08	; 8
 120:	ff af       	std	Y+63, r31	; 0x3f
 122:	28 97       	sbiw	r28, 0x08	; 8
 124:	27 96       	adiw	r28, 0x07	; 7
 126:	ee ad       	ldd	r30, Y+62	; 0x3e
 128:	ff ad       	ldd	r31, Y+63	; 0x3f
 12a:	27 97       	sbiw	r28, 0x07	; 7
 12c:	00 80       	ld	r0, Z
 12e:	27 96       	adiw	r28, 0x07	; 7
 130:	8e ad       	ldd	r24, Y+62	; 0x3e
 132:	9f ad       	ldd	r25, Y+63	; 0x3f
 134:	27 97       	sbiw	r28, 0x07	; 7
 136:	01 96       	adiw	r24, 0x01	; 1
 138:	27 96       	adiw	r28, 0x07	; 7
 13a:	9f af       	std	Y+63, r25	; 0x3f
 13c:	8e af       	std	Y+62, r24	; 0x3e
 13e:	27 97       	sbiw	r28, 0x07	; 7
 140:	25 96       	adiw	r28, 0x05	; 5
 142:	ee ad       	ldd	r30, Y+62	; 0x3e
 144:	ff ad       	ldd	r31, Y+63	; 0x3f
 146:	25 97       	sbiw	r28, 0x05	; 5
 148:	00 82       	st	Z, r0
 14a:	25 96       	adiw	r28, 0x05	; 5
 14c:	8e ad       	ldd	r24, Y+62	; 0x3e
 14e:	9f ad       	ldd	r25, Y+63	; 0x3f
 150:	25 97       	sbiw	r28, 0x05	; 5
 152:	01 96       	adiw	r24, 0x01	; 1
 154:	25 96       	adiw	r28, 0x05	; 5
 156:	9f af       	std	Y+63, r25	; 0x3f
 158:	8e af       	std	Y+62, r24	; 0x3e
 15a:	25 97       	sbiw	r28, 0x05	; 5
 15c:	28 96       	adiw	r28, 0x08	; 8
 15e:	9f ad       	ldd	r25, Y+63	; 0x3f
 160:	28 97       	sbiw	r28, 0x08	; 8
 162:	91 50       	subi	r25, 0x01	; 1
 164:	28 96       	adiw	r28, 0x08	; 8
 166:	9f af       	std	Y+63, r25	; 0x3f
 168:	28 97       	sbiw	r28, 0x08	; 8
 16a:	28 96       	adiw	r28, 0x08	; 8
 16c:	ef ad       	ldd	r30, Y+63	; 0x3f
 16e:	28 97       	sbiw	r28, 0x08	; 8
 170:	ee 23       	and	r30, r30
 172:	c1 f6       	brne	.-80     	; 0x124 <main+0x36>
	unsigned char echo[] = "HKNU >> ";
 174:	ce 01       	movw	r24, r28
 176:	ca 96       	adiw	r24, 0x3a	; 58
 178:	2a 96       	adiw	r28, 0x0a	; 10
 17a:	9f af       	std	Y+63, r25	; 0x3f
 17c:	8e af       	std	Y+62, r24	; 0x3e
 17e:	2a 97       	sbiw	r28, 0x0a	; 10
 180:	e6 e3       	ldi	r30, 0x36	; 54
 182:	f1 e0       	ldi	r31, 0x01	; 1
 184:	2c 96       	adiw	r28, 0x0c	; 12
 186:	ff af       	std	Y+63, r31	; 0x3f
 188:	ee af       	std	Y+62, r30	; 0x3e
 18a:	2c 97       	sbiw	r28, 0x0c	; 12
 18c:	f9 e0       	ldi	r31, 0x09	; 9
 18e:	2d 96       	adiw	r28, 0x0d	; 13
 190:	ff af       	std	Y+63, r31	; 0x3f
 192:	2d 97       	sbiw	r28, 0x0d	; 13
 194:	2c 96       	adiw	r28, 0x0c	; 12
 196:	ee ad       	ldd	r30, Y+62	; 0x3e
 198:	ff ad       	ldd	r31, Y+63	; 0x3f
 19a:	2c 97       	sbiw	r28, 0x0c	; 12
 19c:	00 80       	ld	r0, Z
 19e:	2c 96       	adiw	r28, 0x0c	; 12
 1a0:	8e ad       	ldd	r24, Y+62	; 0x3e
 1a2:	9f ad       	ldd	r25, Y+63	; 0x3f
 1a4:	2c 97       	sbiw	r28, 0x0c	; 12
 1a6:	01 96       	adiw	r24, 0x01	; 1
 1a8:	2c 96       	adiw	r28, 0x0c	; 12
 1aa:	9f af       	std	Y+63, r25	; 0x3f
 1ac:	8e af       	std	Y+62, r24	; 0x3e
 1ae:	2c 97       	sbiw	r28, 0x0c	; 12
 1b0:	2a 96       	adiw	r28, 0x0a	; 10
 1b2:	ee ad       	ldd	r30, Y+62	; 0x3e
 1b4:	ff ad       	ldd	r31, Y+63	; 0x3f
 1b6:	2a 97       	sbiw	r28, 0x0a	; 10
 1b8:	00 82       	st	Z, r0
 1ba:	2a 96       	adiw	r28, 0x0a	; 10
 1bc:	8e ad       	ldd	r24, Y+62	; 0x3e
 1be:	9f ad       	ldd	r25, Y+63	; 0x3f
 1c0:	2a 97       	sbiw	r28, 0x0a	; 10
 1c2:	01 96       	adiw	r24, 0x01	; 1
 1c4:	2a 96       	adiw	r28, 0x0a	; 10
 1c6:	9f af       	std	Y+63, r25	; 0x3f
 1c8:	8e af       	std	Y+62, r24	; 0x3e
 1ca:	2a 97       	sbiw	r28, 0x0a	; 10
 1cc:	2d 96       	adiw	r28, 0x0d	; 13
 1ce:	9f ad       	ldd	r25, Y+63	; 0x3f
 1d0:	2d 97       	sbiw	r28, 0x0d	; 13
 1d2:	91 50       	subi	r25, 0x01	; 1
 1d4:	2d 96       	adiw	r28, 0x0d	; 13
 1d6:	9f af       	std	Y+63, r25	; 0x3f
 1d8:	2d 97       	sbiw	r28, 0x0d	; 13
 1da:	2d 96       	adiw	r28, 0x0d	; 13
 1dc:	ef ad       	ldd	r30, Y+63	; 0x3f
 1de:	2d 97       	sbiw	r28, 0x0d	; 13
 1e0:	ee 23       	and	r30, r30
 1e2:	c1 f6       	brne	.-80     	; 0x194 <main+0xa6>
	int i;

	UCSR0B |= (1 << RXEN0) | (1 << TXEN0);
 1e4:	a1 ec       	ldi	r26, 0xC1	; 193
 1e6:	b0 e0       	ldi	r27, 0x00	; 0
 1e8:	e1 ec       	ldi	r30, 0xC1	; 193
 1ea:	f0 e0       	ldi	r31, 0x00	; 0
 1ec:	80 81       	ld	r24, Z
 1ee:	88 61       	ori	r24, 0x18	; 24
 1f0:	8c 93       	st	X, r24
	UCSR0C |= (1 << UCSZ00) | (1 << UCSZ01);
 1f2:	a2 ec       	ldi	r26, 0xC2	; 194
 1f4:	b0 e0       	ldi	r27, 0x00	; 0
 1f6:	e2 ec       	ldi	r30, 0xC2	; 194
 1f8:	f0 e0       	ldi	r31, 0x00	; 0
 1fa:	80 81       	ld	r24, Z
 1fc:	86 60       	ori	r24, 0x06	; 6
 1fe:	8c 93       	st	X, r24
	UBRR0H = (BAUD_PRESCALE >> 8);
 200:	e5 ec       	ldi	r30, 0xC5	; 197
 202:	f0 e0       	ldi	r31, 0x00	; 0
 204:	10 82       	st	Z, r1
	UBRR0L = BAUD_PRESCALE;
 206:	e4 ec       	ldi	r30, 0xC4	; 196
 208:	f0 e0       	ldi	r31, 0x00	; 0
 20a:	87 e6       	ldi	r24, 0x67	; 103
 20c:	80 83       	st	Z, r24

	i=0;
 20e:	1a 82       	std	Y+2, r1	; 0x02
 210:	19 82       	std	Y+1, r1	; 0x01
 212:	10 c0       	rjmp	.+32     	; 0x234 <main+0x146>
	while (text[i] != '\0') {
		putch(text[i++]);
 214:	29 81       	ldd	r18, Y+1	; 0x01
 216:	3a 81       	ldd	r19, Y+2	; 0x02
 218:	ce 01       	movw	r24, r28
 21a:	04 96       	adiw	r24, 0x04	; 4
 21c:	fc 01       	movw	r30, r24
 21e:	e2 0f       	add	r30, r18
 220:	f3 1f       	adc	r31, r19
 222:	20 81       	ld	r18, Z
 224:	89 81       	ldd	r24, Y+1	; 0x01
 226:	9a 81       	ldd	r25, Y+2	; 0x02
 228:	01 96       	adiw	r24, 0x01	; 1
 22a:	9a 83       	std	Y+2, r25	; 0x02
 22c:	89 83       	std	Y+1, r24	; 0x01
 22e:	82 2f       	mov	r24, r18
 230:	0e 94 5e 00 	call	0xbc	; 0xbc <putch>
	UCSR0C |= (1 << UCSZ00) | (1 << UCSZ01);
	UBRR0H = (BAUD_PRESCALE >> 8);
	UBRR0L = BAUD_PRESCALE;

	i=0;
	while (text[i] != '\0') {
 234:	29 81       	ldd	r18, Y+1	; 0x01
 236:	3a 81       	ldd	r19, Y+2	; 0x02
 238:	ce 01       	movw	r24, r28
 23a:	04 96       	adiw	r24, 0x04	; 4
 23c:	fc 01       	movw	r30, r24
 23e:	e2 0f       	add	r30, r18
 240:	f3 1f       	adc	r31, r19
 242:	80 81       	ld	r24, Z
 244:	88 23       	and	r24, r24
 246:	31 f7       	brne	.-52     	; 0x214 <main+0x126>
		putch(text[i++]);
	}

	i=0;
 248:	1a 82       	std	Y+2, r1	; 0x02
 24a:	19 82       	std	Y+1, r1	; 0x01
 24c:	10 c0       	rjmp	.+32     	; 0x26e <main+0x180>
	while (echo[i] != '\0') {
		putch(echo[i++]);
 24e:	29 81       	ldd	r18, Y+1	; 0x01
 250:	3a 81       	ldd	r19, Y+2	; 0x02
 252:	ce 01       	movw	r24, r28
 254:	ca 96       	adiw	r24, 0x3a	; 58
 256:	fc 01       	movw	r30, r24
 258:	e2 0f       	add	r30, r18
 25a:	f3 1f       	adc	r31, r19
 25c:	20 81       	ld	r18, Z
 25e:	89 81       	ldd	r24, Y+1	; 0x01
 260:	9a 81       	ldd	r25, Y+2	; 0x02
 262:	01 96       	adiw	r24, 0x01	; 1
 264:	9a 83       	std	Y+2, r25	; 0x02
 266:	89 83       	std	Y+1, r24	; 0x01
 268:	82 2f       	mov	r24, r18
 26a:	0e 94 5e 00 	call	0xbc	; 0xbc <putch>
	while (text[i] != '\0') {
		putch(text[i++]);
	}

	i=0;
	while (echo[i] != '\0') {
 26e:	29 81       	ldd	r18, Y+1	; 0x01
 270:	3a 81       	ldd	r19, Y+2	; 0x02
 272:	ce 01       	movw	r24, r28
 274:	ca 96       	adiw	r24, 0x3a	; 58
 276:	fc 01       	movw	r30, r24
 278:	e2 0f       	add	r30, r18
 27a:	f3 1f       	adc	r31, r19
 27c:	80 81       	ld	r24, Z
 27e:	88 23       	and	r24, r24
 280:	31 f7       	brne	.-52     	; 0x24e <main+0x160>
		putch(echo[i++]);
	}

	for (;;) {
		recieved_byte = getch();
 282:	0e 94 4b 00 	call	0x96	; 0x96 <getch>
 286:	8b 83       	std	Y+3, r24	; 0x03
		putch(recieved_byte);
 288:	8b 81       	ldd	r24, Y+3	; 0x03
 28a:	0e 94 5e 00 	call	0xbc	; 0xbc <putch>
 28e:	f9 cf       	rjmp	.-14     	; 0x282 <main+0x194>

00000290 <_exit>:
 290:	f8 94       	cli

00000292 <__stop_program>:
 292:	ff cf       	rjmp	.-2      	; 0x292 <__stop_program>
